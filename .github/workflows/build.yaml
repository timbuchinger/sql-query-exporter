name: Build

on:
  # push:
  workflow_dispatch:
    # inputs:
    #   publish_artifacts:
    #     description: 'Publish artifacts'
    #     required: false
    #     default: 'false'

jobs:
  build-app:
    runs-on: ubuntu-latest
    # services:
    #   mariadb:
    #     image: mariadb:10.7
    #     ports:
    #       - 3306:3306
    #     env:
    #       MARIADB_USER: user
    #       MARIADB_PASSWORD: password
    #       MARIADB_ROOT_PASSWORD: root_password
    #   postgres:
    #     image: postgres:15
    #     ports:
    #       - 5432:5432
    #     env:
    #       POSTGRES_PASSWORD: postgres

    steps:

      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Get the tag name
      #   run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Static Analysis - flake8
      #   run: |
      #     python -m flake8 --max-line-length=150 --max-complexity 5 *.py project/*.py project/*/routes.py

      # - name: Static Analysis - isort
      #   run: |
      #     python -m isort . --lines-after-imports 2 --check-only

      # - name: Bandit
      #   run: |
      #     bandit project/models.py
      #     bandit project/*/*.py

      # - name: Safety check
      #   run: |
      #     safety check

      - name: pytest - SQLite
        run: |
          python -m pytest --cov-report term-missing --cov=project
        # coverage: '/^TOTAL.+?(\d+\%)$/'

      # - name: pytest - MariaDB
      #   run: |
      #     mysql -e 'CREATE DATABASE test_db;' --host=127.0.0.1 -u root -proot_password
      #     python -m pytest
      #   env:
      #     DATABASE_URL: 'mysql+pymysql://root:root_password@localhost/test_db?charset=utf8mb4'

      # - name: pytest - PostgreSQL
      #   run: |
      #     createdb -h localhost -p 5432 -U postgres test_db
      #     python -m pytest
      #   env:
      #     DATABASE_URL: 'postgresql+psycopg2://postgres:postgres@localhost:5432/test_db'
      #     PGPASSWORD: postgres




      # - name: Lint with ruff
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
      #     # default set of ruff rules with GitHub Annotations
      #     ruff --format=github --target-version=py37 .

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sql-query-exporter:${{ steps.date.outputs.date }}-${{ github.run_id }}
            ${{ secrets.DOCKERHUB_USERNAME }}/sql-query-exporter:latest
        # env:
        #   TAG: 1.27.0

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
